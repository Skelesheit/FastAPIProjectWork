version: '3.8'

services:
  db:
    image: postgres:13
    restart: unless-stopped
    container_name: db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "test_log_reg" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s
    networks:
      - app-network

  backend:
    build: .
    container_name: backend
    restart: unless-stopped
    entrypoint: /app/init_db.sh
    command: [ "poetry", "run", "uvicorn", "--host", "0.0.0.0", "--port", "5000", "main:app" ]
    env_file:
      - .env
    ports:
      - "5000:5000"
    environment:
      APP: app.py
      DATABASE_URL: ${DB_URL}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis-data:/data
    environment:
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -a \$REDIS_PASSWORD\", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  worker:
    build: .
    env_file: .env
    command: bash -lc "celery -A src.infrastructure.celery.main:celery_app worker -Q mail -l info"
    depends_on: [ redis, backend ]





volumes:
  pg-data:
    driver: local
  redis-data:
    driver: local

networks:
  app-network:
    driver: bridge
